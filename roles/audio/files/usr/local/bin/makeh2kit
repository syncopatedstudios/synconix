#!/bin/bash
#
# makeh2kit by Andrew M Taylor 2013
#
# This is a script to auto-generate h2drumkit files. Requires bash v4 and gawk
#
# For a full list of options, run 'makeh2kit -h'
#
# This is free and unencumbered software released into the public domain.
# Please read UNLICENSE for more details, or refer to <http://unlicense.org/>


declare -ra ARGS=("$@")
declare -ri NUM_ARGS=$#

declare -ri MAX_LAYERS=16

declare -ri CYAN=3
declare -ri RED=4
declare -ri YELLOW=6
declare -ri WHITE=7

declare -ri ERROR=-1

declare -a instrumentNames
declare -ia instrNumLayers
declare -ia instrFilesIndex
declare -ia instrMidiNotes
declare -a instrFilePaths
declare -a origFileNames
declare -a newFileNames
declare -a fileSearchPaths
declare -a dirSearchPaths

declare kitName="${PWD##*/}" # Kit name defaults to present working directory
declare kitAuthor=""
declare kitInfo=""
declare kitLicense=""
declare fileType="flac"
declare layerMarker=""
declare -r infoHtmlTagOpen="&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">
&lt;html>&lt;head>&lt;meta name=\"qrichtext\" content=\"1\" />&lt;style type=\"text/css\">
p, li { white-space: pre-wrap; }
&lt;/style>&lt;/head>&lt;body style=\" font-family:'Lucida Grande'; font-size:10pt; font-weight:400; font-style:normal;\">
&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">"
declare -r infoHtmlTagClose="&lt;/p>&lt;/body>&lt;/html>"

declare isReverseSortOn=false
declare isInteractiveModeOn=false
declare isServiceMenuModeOn=false


function setTextColour() { tput setf $1; }

function startUnderline() { tput smul; }

function stopUnderline() { tput rmul; }

function moveCursorUpOneLine() { tput cuu1; }

function resetText() { echo -en "\e[0m"; }


function exitWithError()
{
    declare errorMessage="$1"

    setTextColour $RED

    # 1>&2 means redirect text headed for stdout to stderr
    echo -e "\n$errorMessage\n" 1>&2

    resetText

    exit 1
}


function showHelp()
{
    cat << EOF

Usage:  makeh2kit [options]
        makeh2kit [options] --files 'file name' ...

Running makeh2kit with no arguments will scan the current directory
for flac files and create a h2drumkit file named after the current
directory.

Audio files can be treated as indiviual instruments or as instrument
layers grouped either by sub-directory or by file name with numeric
prefixes/suffixes indicating the layers.

Hydrogen kits that "map" SFZ drum kits can also be created. The
resulting kit won't contain any audio files and will instead trigger
the MIDI note of each instrument in the SFZ kit.

Options:
  -n, --name 'KIT NAME'         Drumkit name
  -a, --author 'AUTHOR'         Name of author
  -l, --license 'LICENSE'       License to use for the drumkit
  -i, --info 'INFO'             Additional info; accepts HTML-
                                formatting tags
  -f, --format FORMAT           File format; FORMAT may be
                                flac (default), wav, au, aiff, or sfz
  -L, --layers LAYER_MARKER     Files are grouped into instruments
                                according to a "layer marker"
                                LAYER_MARKER may be dirs, prefix, or
                                suffix (or d, p, or s)
  -r, --reverse                 File names are sorted in reverse order
  -I, --interactive             Run in "interactive" mode, where user
                                is prompted for input
  -h, --help                    Display this help and exit

N.B. When supplying arguments to options -n, -a, -l, and -i use
single rather than double quotes to allow for use of special
characters

EOF
}


function setFileType()
{
    declare input=$1

    # check if user input is a valid file type
    case "$input" in
        [aA][iI][fF][fF] )  fileType="aiff";;
        [aA][uU] )          fileType="au";;
        [fF][lL][aA][cC] )  fileType="flac";;
        [wW][aA][vV] )      fileType="wav";;
        [sS][fF][zZ] )      fileType="sfz";;
        * )                 exitWithError "File type must be flac, wav, au, aiff, or sfz";;
    esac
}


function setLayerMarker()
{
    declare input=$1

    # check if user input is valid
    case "$input" in
        [dD][iI][rR][sS] )          layerMarker="dirs";;
        [dD] )                      layerMarker="dirs";;
        [pP][rR][eE][fF][iI][xX] )  layerMarker="prefix";;
        [pP] )                      layerMarker="prefix";;
        [sS][uU][fF][fF][iI][xX] )  layerMarker="suffix";;
        [sS] )                      layerMarker="suffix";;
        * )                         exitWithError "Layer marker must be dirs, prefix, or suffix (or d, p, s)";;
    esac
}


function setSearchPaths()
{
    declare -i param=$1

    while (( param < NUM_ARGS )); do

        if [ -f "${ARGS[$param]}" ]; then
            fileSearchPaths+=("${ARGS[$param]}")
        elif [ -d "${ARGS[$param]}" ]; then
            dirSearchPaths+=("${ARGS[$param]}")
        fi

        (( param++ ))
    done
}


function processArgs()
{
    declare -i i=0

    if (( NUM_ARGS > 0 )); then
        while (( i < NUM_ARGS )); do
            case ${ARGS[$i]} in
                -n )                (( i++ )); kitName=${ARGS[$i]};;
                --name )            (( i++ )); kitName=${ARGS[$i]};;
                -a )                (( i++ )); kitAuthor=${ARGS[$i]};;
                --author )          (( i++ )); kitAuthor=${ARGS[$i]};;
                -i )                (( i++ )); kitInfo=${ARGS[$i]};;
                --info )            (( i++ )); kitInfo=${ARGS[$i]};;
                -l )                (( i++ )); kitLicense=${ARGS[$i]};;
                --license )         (( i++ )); kitLicense=${ARGS[$i]};;
                -f )                (( i++ )); setFileType ${ARGS[$i]};;
                --format )          (( i++ )); setFileType ${ARGS[$i]};;
                -L )                (( i++ )); setLayerMarker ${ARGS[$i]};;
                --layers )          (( i++ )); setLayerMarker ${ARGS[$i]};;
                -r )                isReverseSortOn=true;;
                --reverse )         isReverseSortOn=true;;
                -I )                isInteractiveModeOn=true;;
                --interactive )     isInteractiveModeOn=true;;
                --service-menu )    isServiceMenuModeOn=true;;
                -h )                showHelp; exit 0;;
                --help )            showHelp; exit 0;;
                --files )           (( i++ )); setSearchPaths $i; break;;
                * )                 exitWithError "Invalid option: \"${ARGS[$i]}\". See 'makeh2kit -h' for usage";;
            esac
            (( i++ ))
        done
    fi
}


function guessFileTypeFromFileList()
{
    declare filePath=""
    declare prevFileType=""

    fileType=""

    for filePath in "${fileSearchPaths[@]}"; do
        fileType="${filePath##*.}"

        if [[ $fileType != [fF][lL][aA][cC] ]] && [[ $fileType != [wW][aA][vV] ]] && \
           [[ $fileType != [aA][uU] ]] && [[ $fileType != [aA][iI][fF][fF] ]] && [[ $fileType != [sS][fF][zZ] ]]; then
            fileType=""
        fi

        if [ "$prevFileType" != "" ] && [ "$fileType" != "$prevFileType" ]; then
            fileType=""
            break
        fi
        prevFileType="$fileType"
    done
}


function showWelcomeMessage()
{
    setTextColour $YELLOW; startUnderline; echo -e "\nMake h2drumkit"; stopUnderline

    setTextColour $WHITE; cat << EOF

This script will auto-generate a h2drumkit file from the selected file(s).
If no files are selected it will scan the current directory for compatible
files (flac, wav, au, aiff, or sfz).

Audio files can be treated as indiviual instruments or as instrument layers
grouped either by sub-directory or by file name with numeric prefixes/suffixes
indicating the layers.

Hydrogen kits that "map" SFZ drum kits can also be created. The resulting kit
will not contain any audio files and will instead trigger the MIDI note of
each instrument in the SFZ kit.

EOF
}


# This function only gets called if makeh2kit was launched from a KDE service menu
function setWorkingDir()
{
    # Try to work out present working directory from list of files passed on the command line
    if (( ${#fileSearchPaths[@]} > 0 )); then
        cd "${fileSearchPaths[0]%/*}"
    elif (( ${#dirSearchPaths[@]} > 1 )); then
        cd "${dirSearchPaths[0]%/*}"
    elif (( ${#dirSearchPaths[@]} == 1 )); then
        # Ask user if this is the PWD or a sub-dir
        setTextColour $YELLOW; echo "Selected directory: ${dirSearchPaths[0]}"
        setTextColour $WHITE; echo "Should makeh2kit set this as the current directory?"
        echo -e "yes - create files in ${dirSearchPaths[0]} (default)\nno  - create files in ${dirSearchPaths[0]%/*}"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="yes"; moveCursorUpOneLine; echo "$input"
        fi

        if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
            cd "${dirSearchPaths[0]}"
            unset dirSearchPaths
        elif [[ $input == [nN] ]] || [[ $input == [nN][oO] ]]; then
            cd "${dirSearchPaths[0]%/*}"
        else
            exitWithError "Invalid value: \"$input\""
        fi
    else
        exitWithError "Error: no files or dirs passed on command line. \nThe programmer has messed up!"
    fi
}


function getValuesFromUser()
{
    declare input=""

    guessFileTypeFromFileList

    showWelcomeMessage

    setTextColour $YELLOW; echo -e "Please enter the following details or simply press enter to accept the\ndefault values...\n"

    if $isServiceMenuModeOn; then
        setWorkingDir
    fi

    # Set file type
    if [[ $fileType == "" ]]; then
        setTextColour $WHITE; echo "File format (flac (default), wav, au, aiff, or sfz):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="flac"; moveCursorUpOneLine; echo "$input"
        fi

        setFileType "$input"
    fi

    # Set kit name
    if [[ $fileType != [sS][fF][zZ] ]]; then
        setTextColour $WHITE; echo "Drumkit name (default is name of current directory, \"${PWD##*/}\"):"
        setTextColour $CYAN; read -e kitName

        if [[ $kitName == "" ]]; then
            kitName="${PWD##*/}"; moveCursorUpOneLine; echo $kitName
        fi
    fi

    # Set author
    setTextColour $WHITE; echo "Author:"
    setTextColour $CYAN; read -e kitAuthor

    # Set license
    setTextColour $WHITE; echo "License:"
    setTextColour $CYAN; read -e kitLicense

    # Set info
    setTextColour $WHITE; echo "Info (HTML formatting tags allowed):"
    setTextColour $CYAN; read -e kitInfo

    # Set "layer marker"
    if [[ $fileType != [sS][fF][zZ] ]]; then
        setTextColour $WHITE; echo "Set \"layer marker\" (none (default), dirs, prefix, or suffix (or d, p, s)):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="none"; moveCursorUpOneLine; echo "$input"
        fi

        if [[ $input != "none" ]]; then
            setLayerMarker "$input"
        fi
    fi

    # Reverse sort order?
    if [[ $fileType != [sS][fF][zZ] ]]; then
        setTextColour $WHITE; echo "Reverse sort order? (default is no):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="no"; moveCursorUpOneLine; echo "$input"
        fi

        if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
            isReverseSortOn=true
        elif [[ $input == [nN] ]] || [[ $input == [nN][oO] ]]; then
            isReverseSortOn=false
        else
            exitWithError "Invalid value: \"$input\""
        fi
    fi

    setTextColour $WHITE
}


function makeInputXmlCompatible()
{
    # ${variable//</&lt;} - Every occurrence of "<" is replaced with "&lt;"

    kitName="${kitName[$i]//</&lt;}"
    kitAuthor="${kitAuthor[$i]//</&lt;}"
    kitInfo="${kitInfo[$i]//</&lt;}"
    kitLicense="${kitLicense[$i]//</&lt;}"
}


function makePathsRelative()
{
    declare -i i=0

    # Remove PWD from start of files and dirs so paths are relative rather than absolute
    for (( i = 0; i < ${#fileSearchPaths[@]}; i++ )); do
        fileSearchPaths[i]="${fileSearchPaths[i]#$PWD/}"
    done

    for (( i = 0; i < ${#dirSearchPaths[@]}; i++ )); do
        if [[ ${dirSearchPaths[i]} == "$PWD" ]] || [[ ${dirSearchPaths[i]} == "$PWD/" ]]; then
            dirSearchPaths[i]="."
        else
            dirSearchPaths[i]="${dirSearchPaths[i]#$PWD/}"
        fi
    done
}


# File names may contain any character except for "\0" and "/" so care needs to be taken
# to prevent file names containing spaces or new lines from being split


function getNumMatchingFiles()
{
    declare -a searchPaths=("$@")

    if (( ${#searchPaths[@]} == 0 )); then
        echo 0; return
    fi

    # RS (Record Separator) is set to "/" as "\0" would simply read the entire
    # input stream as one record. Setting FS (Field Separator) to "\0" is no good
    # as that would cause individual characters to be treated as fields

    find "${searchPaths[@]}" -maxdepth 1 -type f -iname "*.$fileType" -printf "%f/" | gawk '
    BEGIN { RS = "/" }  # RS - Record Separator
    END { print NR }    # NR - No. of Records'

    unset searchPaths
}


function getSortedFileNames()
{
    declare -a searchPaths=("$@")

    declare key1=""
    declare key2=""
    declare key3=""
    declare sortOrder=""

    # File names are sorted by leading digits, trailing digits, and by any characters in between.
    # The order of the sort keys is dependant on the "layer marker"

    if $isReverseSortOn; then
        sortOrder="r"
    fi

    case $layerMarker in
        dirs )      key1="1,1n$sortOrder";  key2="2,2d$sortOrder";  key3="3,3n";;
        prefix )    key1="2,2d";            key2="3,3n";            key3="1,1n$sortOrder";;
        suffix )    key1="1,1n";            key2="2,2d";            key3="3,3n$sortOrder";;
        * )         key1="1,1n$sortOrder";  key2="2,2d$sortOrder";  key3="3,3n";;
    esac

    # sort -z appends null terminator instead of a new line
    # GNU tr won't delete "\0" unless explicitly told to

    find "${searchPaths[@]}" -maxdepth 1 -type f -iname "*.$fileType" -printf "%f/" | gawk '
    BEGIN {
        RS = "/"
        IGNORECASE = 1
    }
    {
        delimFileName = gensub(/(^[0-9]*)(.*[^0-9])([0-9]*[.]'$fileType'$)/, "\\1/\\2/\\3", 1)
        printf("%s\0", delimFileName)
    }
    ' | sort -z -t/ -k $key1 -k $key2 -k $key3 | tr -d '/'

    unset searchPaths
}


function renameDuplicateFileNames()
{
    declare -iA fileNameCounters
    declare -i count=0
    declare newName=""

    for fileName in "${origFileNames[@]}"; do
        fileNameCounters["$fileName"]+=1

        # If file name is a duplicate
        if (( ${fileNameCounters["$fileName"]} > 1 )); then
            count=1
            newName="${fileName%.*}_$count.$fileType"

            # While the new name is not unique
            while [ "${fileNameCounters[$newName]}" != "" ]; do
                (( count++ ))
                newName="${fileName%.*}_$count.$fileType"
            done

            fileNameCounters["$newName"]+=1
            newFileNames+=("$newName")
        else
            newFileNames+=("$fileName")
        fi
    done
}


function findFilesInSubDirs()
{
    if (( ${#dirSearchPaths[@]} == 0 )); then
        return
    fi

    # IFS (Internal Field Separator) is set to null for duration of read operation to prevent
    # file names containing spaces or new lines from being split

    # Find sub-directories containing audio files
    while IFS= read -r -d '' dirName; do
        numFiles=$( getNumMatchingFiles "$dirName" )

        if (( numFiles > 0 )); then
            if (( numFiles > MAX_LAYERS )); then
                echo -e "Warning: Instruments can only have $MAX_LAYERS layers \n$numFiles matching files found in $PWD/$dirName \nOnly the first $MAX_LAYERS will be included\n"
                numFiles=$MAX_LAYERS
            fi
            instrumentNames+=("$dirName")
            instrNumLayers+=($numFiles)
            instrFilePaths+=("$PWD/$dirName")
            instrFilesIndex+=($filesIndex)
            (( filesIndex += numFiles ))

            # Find audio files in sub-directory
            layerNum=1
            while IFS= read -r -d '' fileName; do
                if (( layerNum <= MAX_LAYERS )); then
                    origFileNames+=("$fileName")
                    (( layerNum++ ))
                fi
            done < <(getSortedFileNames "$dirName")
        fi
    done < <(find "${dirSearchPaths[@]}" -maxdepth 1 -type d ! -wholename '[.]' -printf "%f\0" | sort -z)
}


function findFilesWithDigits()
{
    declare -i instrID=-1
    declare -iA instrLayerCounters
    declare instrName=""
    declare regEx=""

    if [ "$layerMarker" == "prefix" ]; then
        # Strip leading digits from file name
        regEx='/^[0-9]*([^0-9].*)$/'
    elif [ "$layerMarker" == "suffix" ]; then
        # Strip trailing digits from file name
        regEx='/^(.*[^0-9])[0-9]*$/'
    else
        exitWithError "Error: \$layerMarker == $layerMarker \nThe programmer has messed up!"
    fi

    numFiles=$( getNumMatchingFiles "${fileSearchPaths[@]}" )

    if (( numFiles > 0 )); then
        while IFS= read -r -d '' fileName; do
            # Strip file extension and layer marker digits from file name
            instrName=$( printf '%s/' "${fileName%.*}" | gawk 'BEGIN { RS = "/" }
            {
                instrName = gensub( '"$regEx"', "\\1", 1 )
                printf("%s", instrName)
            }')

            # If file belongs to a new instrument rather than a layer of an existing instrument...
            if [ "${instrLayerCounters[$instrName]}" == "" ]; then
                (( instrID++ ))
                instrumentNames+=("$instrName")
                instrFilePaths+=("$PWD")
                instrFilesIndex+=($filesIndex)
            fi

            instrLayerCounters["$instrName"]+=1
            layerNum=${instrLayerCounters["$instrName"]}
            if (( layerNum <= MAX_LAYERS )); then
                instrNumLayers[$instrID]=$layerNum
                origFileNames+=("$fileName")
                (( filesIndex++ ))
            else
                echo -e "Warning: Instruments can only have $MAX_LAYERS layers \nInstrument \""$( formatInstrName "$instrName" )"\" already has $MAX_LAYERS layers \n$fileName will not be included\n"
            fi

        done < <(getSortedFileNames "${fileSearchPaths[@]}")
    fi
}


function findFilesSingleLayer()
{
    numFiles=$( getNumMatchingFiles "${fileSearchPaths[@]}" )

    if (( numFiles > 0 )); then
        while IFS= read -r -d '' fileName; do
            origFileNames+=("$fileName")
            instrumentNames+=("${fileName%.*}")
            instrNumLayers+=(1)
            instrFilePaths+=("$PWD")
            instrFilesIndex+=($filesIndex)
            (( filesIndex++ ))
        done < <(getSortedFileNames "${fileSearchPaths[@]}")
    fi
}


function findFilesSFZ()
{
    numFiles=$( getNumMatchingFiles "${fileSearchPaths[@]}" )

    if (( numFiles > 0 )); then
        while IFS= read -r -d '' fileName; do
            origFileNames+=("$fileName")
        done < <(getSortedFileNames "${fileSearchPaths[@]}")
    fi
}


function formatInstrName()
{
    # Replace "_" and "\" characters with spaces and trim leading and trailing white space
    printf '%s' "$1" | tr '\\_' ' ' | xargs
}


function formatInstrNames()
{
    declare -ri numInstruments=${#instrumentNames[@]}
    declare -i instrID=0

    for (( instrID=0; instrID < numInstruments; instrID++ )); do
        instrumentNames[$instrID]=$( formatInstrName "${instrumentNames[$instrID]}" )
    done
}


function findFiles()
{
    declare -i numFiles=0
    declare -i filesIndex=0
    declare -i layerNum=0

    # If no file or dir names have been passed on the command line then set file search path to PWD
    if (( ${#fileSearchPaths[@]} == 0 )) && (( ${#dirSearchPaths[@]} == 0 )); then
        fileSearchPaths=(".")
        dirSearchPaths=(".")
    fi

    if (( ${#fileSearchPaths[@]} == 0 )) && (( ${#dirSearchPaths[@]} == 1 )) && [[ ${dirSearchPaths[0]} == "." ]]; then
        fileSearchPaths=(".")
    fi

    if [ "$fileType" == "sfz" ]; then
        findFilesSFZ
    else
        case $layerMarker in
            dirs )      findFilesInSubDirs; findFilesSingleLayer; renameDuplicateFileNames;;
            prefix )    findFilesWithDigits;;
            suffix )    findFilesWithDigits;;
            * )         findFilesSingleLayer;;
        esac
    fi

    formatInstrNames
}


function calculateF()
{
    declare expression=$1

    # scale=4         : round to 4 fractional digits
    # if(x<1) print 0 : if answer is less than 1 print leading 0
    # 2>/dev/null     : don't print error messages
    echo $( echo "scale=4; x=$expression; if(x<1) print 0; x" | bc -q 2>/dev/null )
}


function printIndent()
{
    declare -i i=0

    for (( i=0; i < currentIndentSize; i++ )); do
        echo -n " "
    done
}


function addLayerXML()
{
    xmlLines+=("$indent<layer>")

    (( currentIndentSize += tabSize ))
    indent=$(printIndent)

        if [ "$layerMarker" == "dirs" ]; then
            xmlLines+=("$indent<filename>${newFileNames[$fileID]}</filename>")
        else
            xmlLines+=("$indent<filename>${origFileNames[$fileID]}</filename>")
        fi
        xmlLines+=("$indent<min>$velLo</min>")
        xmlLines+=("$indent<max>$velHi</max>")
        xmlLines+=("$indent<gain>1</gain>")
        xmlLines+=("$indent<pitch>0</pitch>")

    (( currentIndentSize -= tabSize ))
    indent=$(printIndent)

    xmlLines+=("$indent</layer>")
}


function addInstrumentXML()
{
    velIncrement=$( calculateF "1 / $numLayers" )
    velHi=1
    velLo=$( calculateF "1 - $velIncrement" )

    xmlLines+=("$indent<instrument>")

    (( currentIndentSize += tabSize ))
    indent=$(printIndent)

        xmlLines+=("$indent<id>$instrID</id>")
        xmlLines+=("$indent<name>$instrName</name>")
        xmlLines+=("$indent<volume>1</volume>")
        xmlLines+=("$indent<isMuted>false</isMuted>")
        xmlLines+=("$indent<pan_L>1</pan_L>")
        xmlLines+=("$indent<pan_R>1</pan_R>")
        xmlLines+=("$indent<randomPitchFactor>0</randomPitchFactor>")
        xmlLines+=("$indent<gain>1</gain>")
        xmlLines+=("$indent<filterActive>false</filterActive>")
        xmlLines+=("$indent<Attack>0</Attack>")
        xmlLines+=("$indent<Decay>0</Decay>")
        xmlLines+=("$indent<Sustain>1</Sustain>")
        xmlLines+=("$indent<Release>1000</Release>")
        xmlLines+=("$indent<muteGroup>-1</muteGroup>")
        if [ "$fileType" == "sfz" ]; then
            xmlLines+=("$indent<midiOutChannel>0</midiOutChannel>")
            xmlLines+=("$indent<midiOutNote>${instrMidiNotes[$instrID]}</midiOutNote>")
        fi
        xmlLines+=("$indent<isStopNote>false</isStopNote>")

        while (( fileID < filesIndex + numLayers )); do
            if (( fileID == filesIndex + numLayers - 1 )); then
                velLo=0
            fi

            addLayerXML

            velHi=$( calculateF "$velHi - $velIncrement" )
            velLo=$( calculateF "$velLo - $velIncrement" )
            (( fileID++ ))
        done

    (( currentIndentSize -= tabSize ))
    indent=$(printIndent)

    xmlLines+=("$indent</instrument>")
}


function addInstrumentListXML()
{
    declare -ri numInstruments=${#instrumentNames[@]}
    declare -i instrID=0
    declare instrName=""
    declare -i numLayers=0
    declare -i fileID=0
    declare -i filesIndex=0
    declare velHi=1
    declare velLo=0
    declare velIncrement=0.0

    xmlLines+=("$indent<instrumentList>")

    (( currentIndentSize += tabSize ))
    indent=$(printIndent)

        for (( instrID=0; instrID < numInstruments; instrID++ )); do
            instrName="${instrumentNames[$instrID]}"
            numLayers=${instrNumLayers[$instrID]}
            filesIndex=${instrFilesIndex[$instrID]}
            fileID=$filesIndex

            addInstrumentXML
        done

    (( currentIndentSize -= tabSize ))
    indent=$(printIndent)

    xmlLines+=("$indent</instrumentList>")
}


function createDrumkitXmlFile()
{
    declare -ri tabSize=4
    declare -i currentIndentSize=0
    declare indent=""
    declare -a xmlLines

    xmlLines+=("$indent<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
    xmlLines+=("$indent<drumkit_info xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.hydrogen-music.org/drumkit\">")

    (( currentIndentSize += tabSize ))
    indent=$(printIndent)

        xmlLines+=("$indent<name>$kitName</name>")
        xmlLines+=("$indent<author>$kitAuthor</author>")
        xmlLines+=("$indent<info>$infoHtmlTagOpen$kitInfo$infoHtmlTagClose</info>")
        xmlLines+=("$indent<license>$kitLicense</license>")
        addInstrumentListXML

    (( currentIndentSize -= tabSize ))
    indent=$(printIndent)

    xmlLines+=("$indent</drumkit_info>")

    touch "$kitName"/drumkit.xml

    for line in "${xmlLines[@]}"; do
        printf '%s\n' "$line" >> "$kitName"/drumkit.xml
    done
}


function createH2DrumkitFile()
{
    declare -ri numInstruments=${#instrumentNames[@]}
    declare -i instrID=0
    declare -i numLayers=0
    declare filePath=""
    declare -i fileID=0
    declare -i filesIndex=0

    for (( instrID=0; instrID < numInstruments; instrID++ )); do
        numLayers=${instrNumLayers[$instrID]}
        filePath="${instrFilePaths[$instrID]}"
        filesIndex=${instrFilesIndex[$instrID]}
        fileID=$filesIndex

        while (( fileID < filesIndex + numLayers )); do
            if [ "$layerMarker" == "dirs" ]; then
                ln -s "$filePath/${origFileNames[$fileID]}" "$kitName/${newFileNames[$fileID]}"
            else
                ln -s "$filePath/${origFileNames[$fileID]}" "$kitName/${origFileNames[$fileID]}"
            fi
            (( fileID++ ))
        done
    done

    tar --create --dereference --gzip --file "$kitName".h2drumkit "$kitName"
}


function createDir()
{
    declare dirName="$1"

    # If a directory with this name already exists then bail out
    if [ -d "$dirName" ]; then
        exitWithError "Can't create \"$dirName\", dir already exists"
    else
        mkdir "$dirName"
    fi
}


# This function returns a list of instrument/MIDI-note pairs. Records are separated by "\0"
# and fields are separated by "/". Field 1 is the instrument name, field 2 is the MIDI note
function parseSfzFile()
{
    declare fileName="$1"

    gawk '
    BEGIN {
        RS = "<group>"
        FS = "<region>"
    }

    function getKeyValue( input,    octave, result )
    {
        switch (substr( input, 1, 1 ))
        {
            case /[cC]/:
                result = 0
                break
            case /[dD]/:
                result = 2
                break
            case /[eE]/:
                result = 4
                break
            case /[fF]/:
                result = 5
                break
            case /[gG]/:
                result = 7
                break
            case /[aA]/:
                result = 9
                break
            case /[bB]/:
                result = 11
                break
        }

        if ( input ~ /[[:alpha:]]#/ )
        {
            result++
        }
        if ( input ~ /[[:alpha:]]b/ )
        {
            result--
        }
        if ( input ~ /-1/ )
        {
            result -= 24
        }

        octave = substr( input, length(input), 1 )
        result += 12 * (octave + 1)

        return result
    }

    {
        # If group has a "key=" attribute or if group has "lokey=" and "hikey=" attributes
        # which both have the same values then treat the group as a single instrument

        if ( match( $1, /.*\<key=[0-9]+.*/ ) )
        {
            key = gensub( /.*\<key=([0-9]+).*/, "\\1", 1, $1 )
            key += 24
            instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1 )
            keys[key] = instrName
        }
        else if ( match( $1, /.*\<key=[a-gA-G](#|b)?(-1|[0-9]).*/ ) )
        {
            key = gensub( /.*\<key=([a-gA-G](#|b)?(-1|[0-9])).*/, "\\1", 1, $1 )
            key = getKeyValue( key )
            key += 24
            instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1 )
            keys[key] = instrName
        }
        else if ( match( $1, /.*(lo|hi)key=[0-9]+.*(lo|hi)key=[0-9]+.*/ ) )
        {
            lokey = gensub( /.*lokey=([0-9]+).*/, "\\1", 1, $1 )
            hikey = gensub( /.*hikey=([0-9]+).*/, "\\1", 1, $1 )

            if ( lokey == hikey )
            {
                key = lokey + 24
                instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1 )
                keys[key] = instrName
            }
        }
        else if ( match( $1, /.*(lo|hi)key=[a-gA-G](#|b)?(-1|[0-9]).*(lo|hi)key=[a-gA-G](#|b)?(-1|[0-9]).*/ ) )
        {
            lokey = gensub( /.*lokey=([a-gA-G](#|b)?(-1|[0-9])).*/, "\\1", 1, $1 )
            hikey = gensub( /.*hikey=([a-gA-G](#|b)?(-1|[0-9])).*/, "\\1", 1, $1 )

            lokey = getKeyValue( lokey )
            hikey = getKeyValue( hikey )

            if ( lokey == hikey )
            {
                key = lokey + 24
                instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1 )
                keys[key] = instrName
            }
        }
        else
        {
            # If a region has a key attribute or matching lokey/hikey attributes then treat it as an individual instrument

            for ( field = 2; field <= NF; field++ )
            {
                if ( match( $field, /.*\<key=[0-9]+.*/ ) )
                {
                    key = gensub( /.*\<key=([0-9]+).*/, "\\1", 1, $field )
                    key += 24
                    instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1, $field )
                    keys[key] = instrName
                }
                else if ( match( $field, /.*\<key=[a-gA-G](#|b)?(-1|[0-9]).*/ ) )
                {
                    key = gensub( /.*\<key=([a-gA-G](#|b)?(-1|[0-9])).*/, "\\1", 1, $field )
                    key = getKeyValue( key )
                    key += 24
                    instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1, $field )
                    keys[key] = instrName
                }
                else if ( match( $field, /.*(lo|hi)key=[0-9]+.*(lo|hi)key=[0-9]+.*/ ) )
                {
                    lokey = gensub( /.*lokey=([0-9]+).*/, "\\1", 1, $field )
                    hikey = gensub( /.*hikey=([0-9]+).*/, "\\1", 1, $field )

                    if ( lokey == hikey )
                    {
                        key = lokey + 24
                        instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1, $field )
                        keys[key] = instrName
                    }
                }
                else if ( match( $field, /.*(lo|hi)key=[a-gA-G](#|b)?(-1|[0-9]).*(lo|hi)key=[a-gA-G](#|b)?(-1|[0-9]).*/ ) )
                {
                    lokey = gensub( /.*lokey=([a-gA-G](#|b)?(-1|[0-9])).*/, "\\1", 1, $field )
                    hikey = gensub( /.*hikey=([a-gA-G](#|b)?(-1|[0-9])).*/, "\\1", 1, $field )

                    lokey = getKeyValue( lokey )
                    hikey = getKeyValue( hikey )

                    if ( lokey == hikey )
                    {
                        key = lokey + 24
                        instrName = gensub( /.*sample=(.+)[.]([wW][aA][vV]|[fF][lL][aA][cC]|[oO][gG][gG]).*/, "\\1", 1, $field )
                        keys[key] = instrName
                    }
                }
            }
        }
    }

    END {
        for (k in keys)
        {
            printf( "%s/%d\0", keys[k], k )
        }
    }
    ' "$fileName" | sort -z -t/ -k 2,2n
}


# Main body of script

processArgs

if $isInteractiveModeOn; then
    getValuesFromUser
fi

makeInputXmlCompatible
makePathsRelative

if $isInteractiveModeOn; then
    echo
fi

findFiles

if (( ${#origFileNames[@]} == 0 )); then
    exitWithError "No $fileType files found!"
fi

if [[ $fileType == "sfz" ]]; then
    for fileName in "${origFileNames[@]}"; do
        kitName="${fileName%.*}"
        unset instrumentNames
        unset instrMidiNotes
        unset instrNumLayers

        while IFS= read -r -d '' instrData; do
            instrumentNames+=("${instrData%/*}")    # Discard text after the "/" field separator
            instrMidiNotes+=(${instrData#*/})       # Discard text before the "/" field separator
            instrNumLayers+=(0)
        done < <(parseSfzFile "$fileName")

        formatInstrNames

        createDir "$kitName"
        createDrumkitXmlFile
        createH2DrumkitFile
        rm -rf "$kitName"
    done
else
    createDir "$kitName"
    createDrumkitXmlFile
    createH2DrumkitFile
    rm -rf "$kitName"
fi

if $isInteractiveModeOn; then
    setTextColour $YELLOW; echo -e "All done!\n"
fi

resetText
