---

- name: Check if btrfs is being used
  shell: blkid | grep btrfs
  register: btrfs_exists
  check_mode: no
  ignore_errors: True
  tags: ['filesystem']

- block:
    - name: Install btrfsmaintenance
      shell: "{{ __ansible_pkg_mgr_install }} btrfsmaintenance"
      when: "'btrfsmaintenance' not in installed_packages"

    - name: Enable and/or start btrfs-scrub@-.timer
      systemd: enabled=yes state=started daemon_reload=yes name=btrfs-scrub.timer

  when: "btrfs_exists.rc == 0 and ansible_os_family != 'Archlinux'"
  tags: ['filesystem']

- name: Check if fstrim will be necessary
  shell: cat /sys/block/sda/queue/discard_max_bytes
  register: fstrim_supported
  check_mode: no
  ignore_errors: True
  tags: ['filesystem']

- debug: msg="{{ fstrim_supported }}"
  tags: ['filesystem']

- name: Ensure fstrim.timer is enabled
  systemd:
    name: fstrim.timer
    enabled: yes
  when: fstrim_supported.stdout != 0
  tags: ['filesystem']

#TODO: find a way to use current fstab options instead of item.options
# - name: Ensure compression, autodefrag, and noatime are enabled for btrfs mounts
#   mount:
#     path: "{{ item.mount }}"
#     src: "UUID={{ item.uuid }}"
#     fstype: "{{ item.fstype }}"
#     opts: "subvol=root,compress=zstd:3,noatime,discard"
#     state: present
#     backup: yes
#   with_items:
#     - "{{ ansible_mounts }}"
#   when:
#     - "item.fstype == 'btrfs'"
#     - "item.options.find('compress=zstd') != 0"
#     - "fstrim_supported.stdout != 0"
#   register: fstab
#   tags: ['filesystem']

# - block:
#     - name: Reboot if a different kernel was installed
#       shell: "shutdown -r now"
#       async: 1
#       poll: 0
#       ignore_errors: True
#       register: reboot
#
#     - name: wait for reboot complete before moving on
#       local_action:
#         module: wait_for
#         host: "{{ inventory_hostname }}"
#         state: started
#         delay: 10
#         timeout: 60
#       when: reboot.changed
#
#   when: fstab is changed
#   tags: ['filesystem']
