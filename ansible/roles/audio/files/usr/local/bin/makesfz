#!/bin/bash
#
# makesfz by Andrew M Taylor 2013. Inspired by makesfz.sh by Dan MacDonald
#
# A script to auto-generate SFZ files. Requires BASH v4
#
# This is free and unencumbered software released into the public domain.
# Please read UNLICENSE for more details, or refer to <http://unlicense.org/>


declare -ra ARGS=("$@")
declare -ri NUM_ARGS=$#

declare -ri KEY_MAX=127
declare -ri KEY_MIN=0
declare -ri VEL_MAX=127

declare -ri CYAN=3
declare -ri RED=4
declare -ri YELLOW=6
declare -ri WHITE=7

declare -ri ERROR=-1

declare -a instrumentNames
declare -ia instrNumLayers
declare -ia instrFilesIndex
declare -a sampleFilePaths
declare -a fileSearchPaths
declare -a dirSearchPaths

declare isKeySet=false
declare isSingleFile=false
declare isReverseSortOn=false
declare isInteractiveModeOn=false
declare isServiceMenuModeOn=false

declare loopMode="no_loop"
declare fileType="wav"
declare sfzFileName="${PWD##*/}" # SFZ file name defaults to present working directory
declare layerMarker=""
declare randMarker=""

declare -i lochan=1
declare -i hichan=16
declare -i lokey=0
declare -i hikey=127
declare -i keycenter=60
declare -i key=60


function setTextColour() { tput setf $1; }

function startUnderline() { tput smul; }

function stopUnderline() { tput rmul; }

function moveCursorUpOneLine() { tput cuu1; }

function resetText() { echo -en "\e[0m"; }


function exitWithError()
{
    declare errorMessage="$1"

    setTextColour $RED

    # 1>&2 means redirect text headed for stdout to stderr
    echo -e "\n$errorMessage\n" 1>&2

    resetText

    exit 1
}


function showHelp()
{
    cat << EOF

Usage:  makesfz [options]
        makesfz [options] --files 'file_name' ...

By default, running makesfz with no arguments creates individual
sfz files for every wav file found in the current directory.
Samples are mapped across the entire keyboard with pitch_keycenter
set to MIDI key C4 (middle C).

Audio files can be treated as indiviual instruments or as instrument
layers grouped either by sub-directory or by file name with numeric
prefixes/suffixes indicating the layers.

To scan for files inside a directory, pass the dir name to makesfz
like so: makesfz --files 'dir_name'. To scan for files grouped by
sub-dir inside a directory use: makesfz -L dirs --files 'dir_name'.

Options:
  -s, --single          Creates a single sfz file named after the
                        current directory. Each wav file found is
                        mapped to its own MIDI key (starting at C4
                        by default)
  -n, --name 'NAME'     Output file name. Ignored unless used with
                        -s option
      --lk KEY,         Set lokey. KEY must be 0 - 127 or C-1 - G9
      --lokey KEY       (# or b allowed). Ignored when used with
                        -s option
      --hk KEY,         Set hikey. KEY must be 0 - 127 or C-1 - G9
      --hikey KEY       (# or b allowed). Ignored when used with
                        -s option
      --kc KEY,         Set pitch_keycenter. KEY must be 0 - 127
      --keycenter KEY   or C-1 - G9 (# or b allowed). Ignored when
                        used with -s option
  -k, --key KEY         Overrides --lk, --hk, and --kc, setting lokey,
                        hikey, and pitch_keycenter to KEY.
                        When used with -s option, each audio file is
                        mapped to its own MIDI key starting at KEY
  -1, --one-shot        Set loop_mode to one_shot
  -m, --midi CHAN       Set MIDI channel. CHAN must be 1 - 16 or
                        all (default)
  -f, --format FORMAT   Format of audio files to scan for:
                        wav (default), flac, or ogg
  -L, --layers MARKER   Files are grouped into instruments
                        according to a "layer marker".
                        MARKER may be dirs, prefix, or suffix
                        (or d, p, or s)
  -r, --reverse         File names are sorted in reverse order
  -I, --interactive     Run in "interactive" mode, where user
                        is prompted for input
  -h, --help            Display this help and exit

EOF
}


function checkKeyIsValid()
{
    declare input=$1

    declare -i key=0
    declare -i numChars=0
    declare -i i=0
    declare -i octave=0

    # check if user input is a valid key name
    if [[ $input =~ ^[a-gA-G](#|b)?(-1|[0-9])$ ]]; then
        case "${input:0:1}" in
            [cC] )  key=0;;
            [dD] )  key=2;;
            [eE] )  key=4;;
            [fF] )  key=5;;
            [gG] )  key=7;;
            [aA] )  key=9;;
            [bB] )  key=11;;
        esac

        numChars=`expr length $input`
        i=0
        for (( i = 1; i < numChars; i++ )); do
            if [ "${input:$i:1}" == "#" ]; then
                (( key++ ))
            fi
            if [ "${input:$i:1}" == "b" ]; then
                (( key-- ))
            fi
            if [ "${input:$i:1}" == "-" ]; then
                (( key -= 24 ))
            fi
        done

        octave=${input:(-1)}
        (( key += 12 * (octave + 1) ))

        if [ $key -lt $KEY_MIN ] || [ $key -gt $KEY_MAX ]; then
            key=$ERROR
        fi
    # check if user input is a valid key number
    elif [[ $input =~ ^([0-9]|[1-9][0-9]|1[0-2][0-9])$ ]]; then
        key=$input
        if [ $key -gt $KEY_MAX ]; then
            key=$ERROR
        fi
    else
        key=$ERROR
    fi
    echo $key
}


function setLoKey()
{
    lokey=$( checkKeyIsValid "$1" )
    if (( lokey == ERROR )); then
        exitWithError "Key must be in the range C-1 to G9"
    fi
}


function setHiKey()
{
    hikey=$( checkKeyIsValid "$1" )
    if (( hikey == ERROR )); then
        exitWithError "Key must be in the range C-1 to G9"
    fi
}


function setKeyCenter()
{
    keycenter=$( checkKeyIsValid "$1" )
    if (( keycenter == ERROR )); then
        exitWithError "Key must be in the range C-1 to G9"
    fi
}


function setKey()
{
    key=$( checkKeyIsValid "$1" )
    if (( key == ERROR )); then
        exitWithError "Key must be in the range C-1 to G9"
    fi
    isKeySet=true
}


function setMidiChan()
{
    declare input=$1

    # check user input is valid (1 to 16)
    if [[ $input =~ ^([1-9]|1[0-6])$ ]]; then
        lochan=$input
        hichan=$input
    elif [[ $input =~ ^(all|ALL)$ ]]; then
        lochan=1
        hichan=16
    else
        exitWithError "MIDI channel must be '1 - 16' or 'all'"
    fi
}


function setFileType()
{
    declare input=$1

    # check if user input is a valid file type
    case "$input" in
        [wW][aA][vV] )      fileType="wav";;
        [fF][lL][aA][cC] )  fileType="flac";;
        [oO][gG][gG] )      fileType="ogg";;
        * )                 exitWithError "File type must be wav, flac, or ogg";;
    esac
}


function setLayerMarker()
{
    declare input=$1

    # check if user input is valid
    case "$input" in
        [dD][iI][rR][sS] )          layerMarker="dirs";;
        [dD] )                      layerMarker="dirs";;
        [pP][rR][eE][fF][iI][xX] )  layerMarker="prefix";;
        [pP] )                      layerMarker="prefix";;
        [sS][uU][fF][fF][iI][xX] )  layerMarker="suffix";;
        [sS] )                      layerMarker="suffix";;
        * )                         exitWithError "Layer marker must be dirs, prefix, or suffix (or d, p, s)";;
    esac
}


function setSearchPaths()
{
    declare -i param=$1

    while (( param < NUM_ARGS )); do

        if [ -f "${ARGS[$param]}" ]; then
            fileSearchPaths+=("${ARGS[$param]}")
        elif [ -d "${ARGS[$param]}" ] && [ "${ARGS[$param]}" != "." ] && [ "${ARGS[$param]}" != "./" ]; then
            dirSearchPaths+=("${ARGS[$param]}")
        fi

        (( param++ ))
    done
}


function processArgs()
{
    declare -i i=0

    if (( NUM_ARGS > 0 )); then
        while (( i < NUM_ARGS )); do
            case ${ARGS[$i]} in
                -s )                isSingleFile=true; isKeySet=true;;
                --single )          isSingleFile=true; isKeySet=true;;
                -n )                (( i++ )); sfzFileName=${ARGS[$i]};;
                --name )            (( i++ )); sfzFileName=${ARGS[$i]};;
                --lk )              (( i++ )); setLoKey ${ARGS[$i]};;
                --lokey )           (( i++ )); setLoKey ${ARGS[$i]};;
                --hk )              (( i++ )); setHiKey ${ARGS[$i]};;
                --hikey )           (( i++ )); setHiKey ${ARGS[$i]};;
                --kc )              (( i++ )); setKeyCenter ${ARGS[$i]};;
                --keycenter )       (( i++ )); setKeyCenter ${ARGS[$i]};;
                -k )                (( i++ )); setKey ${ARGS[$i]};;
                --key )             (( i++ )); setKey ${ARGS[$i]};;
                -1 )                loopMode="one_shot";;
                --oneshot )         loopMode="one_shot";;
                -m )                (( i++ )); setMidiChan ${ARGS[$i]};;
                --midi )            (( i++ )); setMidiChan ${ARGS[$i]};;
                -f )                (( i++ )); setFileType ${ARGS[$i]};;
                --format )          (( i++ )); setFileType ${ARGS[$i]};;
                -r )                isReverseSortOn=true;;
                --reverse )         isReverseSortOn=true;;
                -L )                (( i++ )); setLayerMarker ${ARGS[$i]};;
                --layers )          (( i++ )); setLayerMarker ${ARGS[$i]};;
                -I )                isInteractiveModeOn=true;;
                --interactive )     isInteractiveModeOn=true;;
                --service-menu )    isServiceMenuModeOn=true;;
                -h )                showHelp; exit 0;;
                --help )            showHelp; exit 0;;
                --files )           (( i++ )); setSearchPaths $i; break;;
                * )                 exitWithError "Invalid option: \"${ARGS[$i]}\". See 'makesfz -h' for usage";;
            esac
            (( i++ ))
        done
    fi
}


function guessFileTypeFromFileList()
{
    declare filePath=""
    declare prevFileType=""

    fileType=""

    for filePath in "${fileSearchPaths[@]}"; do
        fileType="${filePath##*.}"

        if [[ $fileType != [wW][aA][vV] ]] && [[ $fileType != [fF][lL][aA][cC] ]] && [[ $fileType != [oO][gG][gG] ]]; then
            fileType=""
        fi

        if [ "$prevFileType" != "" ] && [ "$fileType" != "$prevFileType" ]; then
            fileType=""
            break
        fi
        prevFileType="$fileType"
    done
}


function showWelcomeMessage()
{
    setTextColour $YELLOW; startUnderline; echo -e "\nMake SFZ"; stopUnderline

    setTextColour $WHITE; cat << EOF

This script will auto-generate one or more SFZ files from the selected
file(s) and/or dir(s). If no files are selected it will scan the current
directory for compatible audio files (wav, flac, or ogg).

Make SFZ can create individual SFZ files for each audio file or,
alternatively, it can create a single SFZ file in which every audio
file is mapped to its own key.

Audio files can be treated as indiviual instruments or as instrument
layers grouped either by sub-directory or by file name with numeric
prefixes/suffixes indicating the layers.

EOF
}


# This function only gets called if makesfz was launched from a KDE service menu
function setWorkingDir()
{
    # Try to work out present working directory from list of files passed on the command line
    if (( ${#fileSearchPaths[@]} > 0 )); then
        cd "${fileSearchPaths[0]%/*}"
    elif (( ${#dirSearchPaths[@]} > 1 )); then
        cd "${dirSearchPaths[0]%/*}"
    elif (( ${#dirSearchPaths[@]} == 1 )); then
        # Ask user if this is the PWD or a sub-dir
        setTextColour $YELLOW; echo "Selected directory: ${dirSearchPaths[0]}"
        setTextColour $WHITE; echo "Should makeh2kit set this as the current directory?"
        echo -e "yes - create files in ${dirSearchPaths[0]} (default)\nno  - create files in ${dirSearchPaths[0]%/*}"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="yes"; moveCursorUpOneLine; echo "$input"
        fi

        if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
            cd "${dirSearchPaths[0]}"
            unset dirSearchPaths
        elif [[ $input == [nN] ]] || [[ $input == [nN][oO] ]]; then
            cd "${dirSearchPaths[0]%/*}"
        else
            exitWithError "Invalid value: \"$input\""
        fi
    else
        exitWithError "Error: no files or dirs passed on command line. \nThe programmer has messed up!"
    fi
}


function getValuesFromUser()
{
    declare input=""

    guessFileTypeFromFileList

    showWelcomeMessage

    setTextColour $YELLOW; echo -e "Please enter the following details or simply press enter to accept the\ndefault values...\n"

    if $isServiceMenuModeOn; then
        setWorkingDir
    fi

    # Create a single SFZ file?
    setTextColour $WHITE; echo "Do you want to create a single SFZ file? (default is no):"
    setTextColour $CYAN; read -e input

    if [[ $input == "" ]]; then
        input="no"; moveCursorUpOneLine; echo "$input"
    fi

    if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then

        isSingleFile=true

        # Set SFZ file name
        setTextColour $WHITE; echo "Name of SFZ file (default is name of current directory, \"${PWD##*/}\"):"
        setTextColour $CYAN; read -e sfzFileName

        if [[ $sfzFileName == "" ]]; then
            sfzFileName="${PWD##*/}"; moveCursorUpOneLine; echo "$sfzFileName"
        fi

        # Set key
        setTextColour $WHITE; echo "Start key (0 to 127, or C-1 to G9, # or b allowed) (default is C4):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="C4"; moveCursorUpOneLine; echo "$input"
        fi

        setKey "$input"

    elif [[ $input == [nN] ]] || [[ $input == [nN][oO] ]]; then

        # Set lokey
        setTextColour $WHITE; echo "Lowest key (0 to 127, or C-1 to G9, # or b allowed) (default is C-1):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="C-1"; moveCursorUpOneLine; echo "$input"
        fi

        setLoKey "$input"

        # Set hikey
        setTextColour $WHITE; echo "Highest key (0 to 127, or C-1 to G9, # or b allowed) (default is G9):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="G9"; moveCursorUpOneLine; echo "$input"
        fi

        setHiKey "$input"

        # Set pitch key center
        setTextColour $WHITE; echo "Pitch key center (0 to 127, or C-1 to G9, # or b allowed) (default is C4):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="C4"; moveCursorUpOneLine; echo "$input"
        fi

        setKeyCenter "$input"

    else
        exitWithError "Invalid value: \"$input\""
    fi

    # Set audio file format
    if [[ $fileType == "" ]]; then
        setTextColour $WHITE; echo "Audio file format (wav (default), flac, or ogg):"
        setTextColour $CYAN; read -e input

        if [[ $input == "" ]]; then
            input="wav"; moveCursorUpOneLine; echo "$input"
        fi

        setFileType "$input"
    fi

    # Enable one-shot?
    setTextColour $WHITE; echo "Enable one-shot? (default is no):"
    setTextColour $CYAN; read -e input

    if [[ $input == "" ]]; then
        input="no"; moveCursorUpOneLine; echo "$input"
    fi

    if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
        loopMode="one_shot"
    elif [[ $input == [nN] ]] || [[ $input == [nN][oO] ]]; then
        loopMode="no_loop"
    else
        exitWithError "Invalid value: \"$input\""
    fi

    # Set MIDI channel
    setTextColour $WHITE; echo "Set MIDI channel (1 - 16, or all) (default is \"all\"):"
    setTextColour $CYAN; read -e input

    if [[ $input == "" ]]; then
        input="all"; moveCursorUpOneLine; echo "$input"
    fi

    setMidiChan "$input"

    # Set "layer marker"
    setTextColour $WHITE; echo "Set \"layer marker\" (none (default), dirs, prefix, or suffix (or d, p, s)):"
    setTextColour $CYAN; read -e input

    if [[ $input == "" ]]; then
        input="none"; moveCursorUpOneLine; echo "$input"
    fi

    if [[ $input != "none" ]]; then
        setLayerMarker "$input"
    fi

    # Reverse sort order?
    setTextColour $WHITE; echo "Reverse sort order? (default is no):"
    setTextColour $CYAN; read -e input

    if [[ $input == "" ]]; then
        input="no"; moveCursorUpOneLine; echo "$input"
    fi

    if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
        isReverseSortOn=true
    elif [[ $input == [nN] ]] || [[ $input == [nN][oO] ]]; then
        isReverseSortOn=false
    else
        exitWithError "Invalid value: \"$isReverseSortOn\""
    fi

    setTextColour $WHITE
}


function makePathsRelative()
{
    declare -i i=0

    # Remove PWD from start of files and dirs so paths are relative rather than absolute
    for (( i = 0; i < ${#fileSearchPaths[@]}; i++ )); do
        fileSearchPaths[i]="${fileSearchPaths[i]#$PWD/}"
    done

    for (( i = 0; i < ${#dirSearchPaths[@]}; i++ )); do
        if [[ ${dirSearchPaths[i]} == "$PWD" ]] || [[ ${dirSearchPaths[i]} == "$PWD/" ]]; then
            dirSearchPaths[i]="."
        else
            dirSearchPaths[i]="${dirSearchPaths[i]#$PWD/}"
        fi
    done
}


# File names may contain any character except for "\0" and "/" so care needs to be taken
# to prevent file names containing spaces or new lines from being split


function getNumMatchingFiles()
{
    declare -a searchPaths=("$@")

    # RS (Record Separator) is set to "/" as "\0" would simply read the entire
    # input stream as one record. Setting FS (Field Separator) to "\0" is no good
    # as that would cause individual characters to be treated as fields

    find "${searchPaths[@]}" -maxdepth 1 -type f -iname "*.$fileType" -printf "%f/" | gawk '
    BEGIN { RS = "/" }  # RS - Record Separator
    END { print NR }    # NR - No. of Records'

    unset searchPaths
}


function getSortedFileNames()
{
    declare -a searchPaths=("$@")

    declare key1=""
    declare key2=""
    declare key3=""
    declare sortOrder=""

    # File names are sorted by leading digits, trailing digits, and by any characters in between.
    # The order of the sort keys is dependant on the "layer marker"

    if $isReverseSortOn; then
        sortOrder="r"
    fi

    case $layerMarker in
        dirs )      key1="1,1n$sortOrder";  key2="2,2d$sortOrder";  key3="3,3n";;
        prefix )    key1="2,2d";            key2="3,3n";            key3="1,1n$sortOrder";;
        suffix )    key1="1,1n";            key2="2,2d";            key3="3,3n$sortOrder";;
        * )         key1="1,1n$sortOrder";  key2="2,2d$sortOrder";  key3="3,3n";;
    esac

    # sort -z appends null terminator instead of a new line
    # GNU tr won't delete "\0" unless explicitly told to

    find "${searchPaths[@]}" -maxdepth 1 -type f -iname "*.$fileType" -printf "%f/" | gawk '
    BEGIN {
        RS = "/"
        IGNORECASE = 1
    }
    {
        delimFileName = gensub( /(^[0-9]*)(.*[^0-9])([0-9]*[.]'$fileType'$)/, "\\1/\\2/\\3", 1 )
        printf( "%s\0", delimFileName )
    }
    ' | sort -z -t/ -k $key1 -k $key2 -k $key3 | tr -d '/'

    unset searchPaths
}


function findFilesInSubDirs()
{
    # IFS (Internal Field Separator) is set to null for duration of read operation to prevent
    # file names containing spaces or new lines from being split

    # Find sub-directories containing audio files
    while IFS= read -r -d '' subDir; do
        numFiles=$( getNumMatchingFiles "$subDir" )

        if (( numFiles > 0 )); then
            if (( numFiles > VEL_MAX )); then
                echo -e "Warning: Instruments can only have $VEL_MAX layers \n$numFiles matching files found in $subDir \nOnly the first $VEL_MAX will be included\n"
                numFiles=$VEL_MAX
            fi
            instrumentNames+=("${subDir##*/}")
            instrNumLayers+=($numFiles)
            instrFilesIndex+=($filesIndex)
            (( filesIndex += numFiles ))

            # Find audio files in sub-directory
            layerNum=1
            while IFS= read -r -d '' fileName; do
                if (( layerNum <= VEL_MAX )); then
                    subDir="${subDir#./}"
                    filePath="$subDir/$fileName"
                    sampleFilePaths+=("${filePath//'/'/\\}")
                    (( layerNum++ ))
                fi
            done < <(getSortedFileNames "$subDir")
        fi
    done < <(find "$directory" -maxdepth 1 -type d ! -wholename "$directory" -print0 | sort -z)
}


function findFilesWithDigits()
{
    declare -a searchPaths=("$@")

    declare -iA instrLayerCounters
    declare instrName=""
    declare regEx=""

    if [ "$layerMarker" == "prefix" ]; then
        # Strip leading digits from file name
        regEx='/^[0-9]*([^0-9].*)$/'
    elif [ "$layerMarker" == "suffix" ]; then
        # Strip trailing digits from file name
        regEx='/^(.*[^0-9])[0-9]*$/'
    else
        exitWithError "Error: \$layerMarker == $layerMarker \nThe programmer has messed up!"
    fi

    numFiles=$( getNumMatchingFiles "${searchPaths[@]}" )

    if (( numFiles > 0 )); then
        while IFS= read -r -d '' fileName; do
            # Strip file extension and layer marker digits from file name
            instrName=$( printf '%s/' "${fileName%.*}" | gawk 'BEGIN { RS = "/" }
            {
                instrName = gensub( '"$regEx"', "\\1", 1 )
                printf("%s", instrName)
            }')

            # If file belongs to a new instrument rather than a layer of an existing instrument...
            if [ "${instrLayerCounters[$instrName]}" == "" ]; then
                (( instrID++ ))
                instrumentNames+=("$instrName")
                instrFilesIndex+=($filesIndex)
            fi

            instrLayerCounters["$instrName"]+=1
            layerNum=${instrLayerCounters["$instrName"]}

            if (( layerNum <= VEL_MAX )); then
                instrNumLayers[$instrID]=$layerNum

                if [ "$directory" == "" ] || [ "$directory" == "." ] || [ "$directory" == "./" ]; then
                    filePath="$fileName"
                else
                    filePath="$directory/$fileName"
                fi
                sampleFilePaths+=("${filePath//'/'/\\}")
                (( filesIndex++ ))
            else
                echo -e "Warning: Instruments can only have $VEL_MAX layers \nInstrument \""$( formatInstrName "$instrName" )"\" already has $VEL_MAX layers \n$fileName will not be included\n"
            fi
        done < <(getSortedFileNames "${searchPaths[@]}")
    fi
}


function findFilesSingleLayer()
{
    declare -a searchPaths=("$@")

    numFiles=$( getNumMatchingFiles "${searchPaths[@]}" )

    if (( numFiles > 0 )); then
        while IFS= read -r -d '' fileName; do
            instrumentNames+=("${fileName%.*}")
            instrNumLayers+=(1)

            if [ "$directory" == "" ] || [ "$directory" == "." ] || [ "$directory" == "./" ]; then
                filePath="$fileName"
            else
                filePath="$directory/$fileName"
            fi
            sampleFilePaths+=("${filePath//'/'/\\}")
            instrFilesIndex+=($filesIndex)

            (( filesIndex++ ))
        done < <(getSortedFileNames "${searchPaths[@]}")
    fi
}


function formatInstrName()
{
    # Replace underscores with spaces and trim leading and trailing white space
    printf '%s' "$1" | tr '_' ' ' | xargs
}


function formatInstrNames()
{
    declare -ri numInstruments=${#instrumentNames[@]}
    declare -i instrID=0

    for (( instrID=0; instrID < numInstruments; instrID++ )); do
        instrumentNames[$instrID]=$( formatInstrName "${instrumentNames[$instrID]}" )
    done
}


function findFiles()
{
    declare -i numFiles=0
    declare -i filesIndex=0
    declare -i layerNum=0
    declare filePath=""
    declare -i instrID=-1

    # If no file or dir names have been passed on the command line then set dir search path to PWD
    if (( ${#dirSearchPaths[@]} == 0 )) && (( ${#fileSearchPaths[@]} == 0 )); then
        dirSearchPaths=(".")
    fi

    for directory in "${dirSearchPaths[@]}"; do
        case $layerMarker in
            dirs )      findFilesInSubDirs "$directory"; findFilesSingleLayer "$directory";;
            prefix )    findFilesWithDigits "$directory";;
            suffix )    findFilesWithDigits "$directory";;
            * )         findFilesSingleLayer "$directory";;
        esac
    done

    unset directory

    if (( ${#fileSearchPaths[@]} > 0 )); then
        case $layerMarker in
            dirs )      findFilesSingleLayer "${fileSearchPaths[@]}";;
            prefix )    findFilesWithDigits "${fileSearchPaths[@]}";;
            suffix )    findFilesWithDigits "${fileSearchPaths[@]}";;
            * )         findFilesSingleLayer "${fileSearchPaths[@]}";;
        esac
    fi

    formatInstrNames
}


function addGroup()
{
    (( velIncrement = VEL_MAX / numLayers + 1 ))
    (( numBigIncrements = VEL_MAX % numLayers ))

    if (( numLayers == VEL_MAX )); then
        velIncrement=1
    fi
    lovel=1
    hivel=$velIncrement
    layerNum=1

    textLines+=("// $instrName")
    if $isKeySet; then
        textLines+=("<group> key=$key loop_mode=$loopMode lochan=$lochan hichan=$hichan")
    else
        textLines+=("<group> lokey=$lokey hikey=$hikey pitch_keycenter=$keycenter loop_mode=$loopMode lochan=$lochan hichan=$hichan")
    fi

    while (( fileID < filesIndex + numLayers )); do
        if (( lovel > 127 )); then
            lovel=127
        fi
        if (( hivel > 127 )); then
            hivel=127
        fi

        textLines+=("<region> lovel=$lovel hivel=$hivel sample=${sampleFilePaths[$fileID]}")

        if (( layerNum == numBigIncrements )); then
            (( velIncrement -= 1 ))
        fi
        (( lovel = hivel + 1 ))
        (( hivel += velIncrement ))

        (( layerNum++ ))
        (( fileID++ ))
    done

    textLines+=("")
}


function createSingleSfzFile()
{
    declare -a textLines
    declare -ri numInstruments=${#instrumentNames[@]}
    declare -i instrID=0
    declare instrName=""
    declare -i numLayers=0
    declare -i layerNum=0
    declare -i fileID=0
    declare -i filesIndex=0
    declare -i lovel=0
    declare -i hivel=0
    declare -i velIncrement=0
    declare -i numBigIncrements=0
    declare input=""

    textLines+=("// This file was auto-generated by makesfz")
    textLines+=("")

    for (( instrID=0; instrID < numInstruments; instrID++ )); do
        if (( key > KEY_MAX )); then
            exitWithError "Ran out of keys! Try assigning first sample to a lower key"
        fi
        instrName="${instrumentNames[$instrID]}"
        numLayers=${instrNumLayers[$instrID]}
        filesIndex=${instrFilesIndex[$instrID]}
        fileID=$filesIndex
        addGroup
        (( key++ ))
    done

    if [ -f "$sfzFileName".sfz ]; then
        setTextColour $WHITE; echo -e "Warning: A file with the name $sfzFileName.sfz already exists \nDo you want to overwrite it?"
        setTextColour $CYAN; read -e input

        if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
            rm -f "$sfzFileName".sfz
            echo
        else
            exitWithError "Bailing out!"
        fi
    fi

    touch "$sfzFileName".sfz

    for line in "${textLines[@]}"; do
        printf '%s\n' "$line" >> "$sfzFileName".sfz
    done
}


function createMultiSfzFiles()
{
    declare -a textLines
    declare -ri numInstruments=${#instrumentNames[@]}
    declare -i instrID=0
    declare instrName=""
    declare -i numLayers=0
    declare -i layerNum=0
    declare -i fileID=0
    declare -i filesIndex=0
    declare -i lovel=0
    declare -i hivel=0
    declare -i velIncrement=0
    declare -i numBigIncrements=0
    declare input=""

    for (( instrID=0; instrID < numInstruments; instrID++ )); do
        unset textLines
        textLines+=("// This file was auto-generated by makesfz")
        textLines+=("")

        instrName="${instrumentNames[$instrID]}"
        numLayers=${instrNumLayers[$instrID]}
        filesIndex=${instrFilesIndex[$instrID]}
        fileID=$filesIndex
        addGroup

        if [ -f "$instrName".sfz ]; then
            setTextColour $WHITE; echo -e "Warning: A file with the name $instrName.sfz already exists \nDo you want to overwrite it?"
            setTextColour $CYAN; read -e input

            if [[ $input == [yY] ]] || [[ $input == [yY][eE][sS] ]]; then
                rm -f "$instrName".sfz
                echo
            else
                exitWithError "Bailing out!"
            fi
        fi

        touch "$instrName".sfz

        for line in "${textLines[@]}"; do
            printf '%s\n' "$line" >> "$instrName".sfz
        done
    done
}


# Main body of script

processArgs

if $isInteractiveModeOn; then
    getValuesFromUser
fi

if (( lokey > hikey )); then
    exitWithError "lokey can't be higher than hikey"
fi

makePathsRelative

if $isInteractiveModeOn; then
    echo
fi

findFiles

if (( ${#sampleFilePaths[@]} == 0 )); then
    exitWithError "No $fileType files found!"
fi

if $isSingleFile; then
    createSingleSfzFile
else
    createMultiSfzFiles
fi

if $isInteractiveModeOn; then
    setTextColour $YELLOW; echo -e "All done!\n"
fi

resetText
