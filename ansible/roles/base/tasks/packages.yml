---

- name: Include common package variables.
  include_vars: "common.yml"

- name: remove some packages
  shell: |
    if ! [ -x "$(command -v yay)" ]; then
      pamac remove --no-orphans --no-confirm {{ item }}
    else
      yay -Rdd --noconfirm {{ item }}
    fi
  with_items:
    - nodejs
    - erlang-nox
    - pipewire-media-session
  become: True
  become_user: "{{ user.name }}"
  ignore_errors: True

- name: Get list of installed packages
  shell: |
    if ! [ -x "$(command -v yay)" ]; then
      pamac list --installed | awk '{ print $1 }'
    else
      yay -Qe | awk '{ print $1 }'
    fi
  register: package_list
  ignore_errors: yes
  become: True
  become_user: "{{ user.name }}"
  tags: ['build_pkgs']

- name: Determine kernel packages to install
  set_fact:
    _kernel_packages: "{{ base.kernel|difference(package_list.stdout) }}"

- name: Determine base packages to installl
  set_fact:
    _base_packages: "{{ (base.system + docker)|difference(package_list.stdout) }}"

- name: Determine network packages to install
  set_fact:
    _network_packages: "{{ base.network|difference(package_list.stdout) }}"

- name: Determine audio packages to install
  set_fact:
    _audio_packages: "{{ (audio.jack + audio.pulseaudio + audio.utils + audio.plugins + audio.applications)|difference(package_list.stdout) }}"

- name: Determine ui packages to install
  set_fact:
    _ui_packages: "{{ (ui.i3 + ui.x11 + ui.fonts)|difference(package_list.stdout) }}"

- name: Determine desktop packages to install
  set_fact:
    _desktop_packages: "{{ desktop|difference(package_list.stdout) }}"

- include: kernel.yml
  tags: ['grub']

- name: Install base packages
  aur:
    use: auto
    name: "{{ item }}"
    state: present
  with_items:
    - "[{{ _base_packages }}]"
  become: True
  become_user: "{{ user.name }}"
  when: _base_packages|length > 0

- name: Install network packages
  aur:
    use: auto
    name: "{{ item }}"
    state: present
  with_items:
    - "[{{ _network_packages }}]"
  become: True
  become_user: "{{ user.name }}"
  when: _network_packages|length > 0

- name: Install audio packages
  aur:
    use: auto
    name: "{{ item }}"
    state: present
  with_items:
    - "[{{ _audio_packages }}]"
  become: True
  become_user: "{{ user.name }}"
  when: _audio_packages|length > 0 and inventory_hostname in groups['daw']
  register: package_result

- block:

    - name: Install ui and desktop packages
      aur:
        use: auto
        name: "{{ item }}"
        state: present
      with_items:
        - "[{{ (_ui_packages + _desktop_packages) }}]"
      become: True
      become_user: "{{ user.name }}"
      when: (_ui_packages|length > 0 or _desktop_packages|length > 0)
      register: package_result

  when: graphical_target|bool
  tags: ['packages', 'desktop']

- name: Gather list of installed python modules
  command: pip3 list installed | awk '{print $1}'
  register: pip_list
  ignore_errors: yes

- name: determine python modules to install
  set_fact:
    _python_modules: "{{ python|difference(pip_list.stdout) }}"

- name: Install python modules
  pip:
    name: "{{ item }}"
    executable: pip3
  with_items:
    - "{{ _python_modules }}"
