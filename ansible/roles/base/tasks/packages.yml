---

- name: Include common package variables
  include_vars: "common.yml"
  tags: ['vars']

# - name: remove some packages
#   shell: |
#     if ! [ -x "$(command -v yay)" ]; then
#       pamac remove --no-orphans --no-confirm {{ item }}
#     else
#       yay -Rdd --noconfirm {{ item }}
#     fi
#   with_items:
#     - nodejs
#     - erlang-nox
#     - pipewire-media-session
#   become: True
#   become_user: "{{ user.name }}"
#   ignore_errors: True

- name: Ensure these packages are not installed
  pacman:
    name: "{{ item }}"
    state: absent
    force: yes
    extra_args: --noconfirm
  with_items:
    - nodejs
    - erlang-nox
    - pipewire-media-session
  ignore_errors: True

- name: Gather list of currently installed packages
  shell: |
    if ! [ -x "$(command -v yay)" ]; then
      pamac list --installed | awk '{ print $1 }'
    else
      yay -Qe | awk '{ print $1 }'
    fi
  become: True
  become_user: "{{ user.name }}"
  register: package_list
  ignore_errors: True
  tags: ['vars']


- block:
    - name: Determine packages that will be installed
      debug:
        msg: "comparing lists..."

    - set_fact:
        _kernel_packages: "{{ base.kernel|difference(package_list.stdout) }}"

    - set_fact:
        _base_packages: "{{ base.system + audio.jack + audio.pulseaudio + audio.utils|difference(package_list.stdout) }}"

    - set_fact:
        _network_packages: "{{ base.network|difference(package_list.stdout) }}"

    - set_fact:
        _audio_packages: "{{ (audio.plugins + audio.applications)|difference(package_list.stdout) }}"

    - set_fact:
        _ui_packages: "{{ (ui.i3 + ui.x11 + ui.fonts)|difference(package_list.stdout) }}"

    - set_fact:
        _desktop_packages: "{{ desktop|difference(package_list.stdout) }}"

    - set_fact:
        _docker_packages: "{{ docker|difference(package_list.stdout) }}"

  tags: ['vars']

- include: kernel.yml
  tags: ['grub']

- block:
    - name: Install Base packages
      aur:
        use: auto
        name: "{{ _base_packages }}"
        state: present
      when: _base_packages|length > 0

    - name: Install Network packages
      aur:
        use: auto
        name: "{{ _network_packages }}"
        state: present
      when: _network_packages|length > 0 and ansible_lsb['id'] != 'Manjaro-ARM'

    - name: Install Docker packages
      aur:
        use: auto
        name: "{{ _docker_packages }}"
        state: present
      when: _docker_packages|length > 0 and docker_host|bool

    - name: Install Audio packages
      aur:
        use: auto
        name: "{{ _audio_packages }}"
        state: present
      when: _audio_packages|length > 0 and inventory_hostname in groups['daw']
      register: package_result

    - name: Install UI and Desktop application packages
      aur:
        use: auto
        name: "{{ (_ui_packages + _desktop_packages) }}"
        state: present
      become: True
      become_user: "{{ user.name }}"
      when:
        - (_ui_packages|length > 0 or _desktop_packages|length > 0)
        - graphical_target|bool
      register: package_result

  become: True
  become_user: "{{ user.name }}"

- name: Install pip
  aur:
    use: auto
    name: python-pip
    state: present
  become: True
  become_user: "{{ user.name }}"

- block:
    - name: Gather list of installed python modules
      command: pip3 list installed | awk '{print $1}'
      register: pip_list
      ignore_errors: yes

    - name: determine python modules to install
      set_fact:
        _python_modules: "{{ python|difference(pip_list.stdout) }}"

    # this task will ignore errors in check mode
    - name: Install python modules
      pip:
        name: "{{ _python_modules }}"
        executable: pip3
      ignore_errors: "{{ ansible_check_mode }}"

  when: ansible_lsb['id'] != 'Manjaro-ARM'
  tags: ['python']
