# filter-chain example config file for PipeWire version "0.3.49" #
context.properties = {
    ## Configure properties in the system.
    #mem.warn-mlock  = false
    #mem.allow-mlock = true
    #mem.mlock-all   = false
    log.level        = 0
}

context.spa-libs = {
    #<factory-name regex> = <library-name>
    #
    # Used to find spa factory names. It maps an spa factory name
    # regular expression to a library name that should contain
    # that factory.
    #
    audio.convert.* = audioconvert/libspa-audioconvert
    support.*       = support/libspa-support
}

context.modules = [
    # Uses realtime scheduling to boost the audio thread priorities
    { name = libpipewire-module-rt
        args = {
            #rt.prio      = 88
            #rt.time.soft = -1
            #rt.time.hard = -1
        }
        flags = [ ifexists nofail ]
    }

    # The native communication protocol.
    { name = libpipewire-module-protocol-native }

    # Allows creating nodes that run in the context of the
    # client. Is used by all clients that want to provide
    # data to PipeWire.
    { name = libpipewire-module-client-node }

    # Makes a factory for wrapping nodes in an adapter with a
    # converter and resampler.
    { name = libpipewire-module-adapter }

    { name = libpipewire-module-filter-chain
        args = {
            node.description = "Glame Low/Highpass Filter"
            media.name       = "Glame Low/Highpass Filter"
            filter.graph = {
                nodes = [
                    {
                        name   = lowpass
                        type   = ladspa
                        plugin = lowpass_iir_1891
                        label  = lowpass_iir
                        control = {
                            "Cutoff Frequency" 18600.00
                            "Stages(2 poles per stage)" 3
                        }
                    }
                    {
                        name   = highpass
                        type   = ladspa
                        plugin = highpass_iir_1890
                        label  =  highpass_iir
                        control = {
                            "Cutoff Frequency" 120.00
                            "Stages(2 poles per stage)" 2
                        }
                    }
                ]
                links = [
                    { output = "lowpass:Output"   input = "highpass:Input" }
                ]
                inputs  = [ "lowpass:Input" ]
                outputs = [ "highpass:Output" ]
            }

            audio.position = [ FL FR ]
            capture.props = {
                node.name = "effect_input.filter-chain-pass"
                node.passive = true
            }
            playback.props = {
                node.name = "effect_output.filter-chain-pass"
                media.class = Audio/Source
            }
        }
    }
]
